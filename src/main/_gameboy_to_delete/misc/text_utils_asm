"

SECTION \"Text\", ROM0

textFontTileData:
defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
defb $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$00,$00,$10,$10,$00,$00 ; !
defb $28,$28,$28,$28,$28,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; \"
defb $28,$28,$28,$28,$7c,$7c,$28,$28,$7c,$7c,$28,$28,$28,$28,$00,$00 ; #
defb $10,$10,$3c,$3c,$50,$50,$38,$38,$14,$14,$78,$78,$10,$10,$00,$00 ; $
defb $64,$64,$68,$68,$08,$08,$10,$10,$20,$20,$2c,$2c,$4c,$4c,$00,$00 ; %
defb $38,$38,$40,$40,$40,$40,$3c,$3c,$48,$48,$48,$48,$3c,$3c,$00,$00 ; $
defb $10,$10,$10,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; '
defb $08,$08,$10,$10,$20,$20,$20,$20,$20,$20,$10,$10,$08,$08,$00,$00 ; (
defb $20,$20,$10,$10,$08,$08,$08,$08,$08,$08,$10,$10,$20,$20,$00,$00 ; )
defb $00,$00,$10,$10,$54,$54,$38,$38,$54,$54,$10,$10,$00,$00,$00,$00 ; *
defb $00,$00,$10,$10,$10,$10,$7c,$7c,$10,$10,$10,$10,$00,$00,$00,$00 ; +
defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$20,$20,$20,$40,$40 ; ,
defb $00,$00,$00,$00,$00,$00,$7c,$7c,$00,$00,$00,$00,$00,$00,$00,$00 ; -
defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$40,$40,$40,$00,$00 ; .
defb $04,$04,$04,$04,$08,$08,$10,$10,$20,$20,$40,$40,$40,$40,$00,$00 ; /
defb $38,$38,$44,$44,$4c,$4c,$54,$54,$64,$64,$44,$44,$38,$38,$00,$00 ; 0
defb $10,$10,$30,$30,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$00,$00 ; 1
defb $38,$38,$44,$44,$04,$04,$08,$08,$10,$10,$20,$20,$7c,$7c,$00,$00 ; 2
defb $7c,$7c,$04,$04,$08,$08,$18,$18,$04,$04,$04,$04,$78,$78,$00,$00 ; 3
defb $0c,$0c,$14,$14,$24,$24,$44,$44,$7c,$7c,$04,$04,$04,$04,$00,$00 ; 4
defb $7c,$7c,$40,$40,$40,$40,$78,$78,$04,$04,$04,$04,$78,$78,$00,$00 ; 5
defb $18,$18,$20,$20,$40,$40,$78,$78,$44,$44,$44,$44,$38,$38,$00,$00 ; 6
defb $7c,$7c,$04,$04,$04,$04,$08,$08,$08,$08,$10,$10,$10,$10,$00,$00 ; 7
defb $38,$38,$44,$44,$44,$44,$38,$38,$44,$44,$44,$44,$38,$38,$00,$00 ; 8
defb $38,$38,$44,$44,$44,$44,$3c,$3c,$04,$04,$08,$08,$30,$30,$00,$00 ; 9
defb $00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$10,$10,$10,$10,$00,$00 ; :
defb $00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$10,$10,$10,$10,$20,$20 ; ;
defb $04,$04,$08,$08,$10,$10,$20,$20,$10,$10,$08,$08,$04,$04,$00,$00 ; <
defb $00,$00,$00,$00,$7c,$7c,$00,$00,$7c,$7c,$00,$00,$00,$00,$00,$00 ; =
defb $20,$20,$10,$10,$08,$08,$04,$04,$08,$08,$10,$10,$20,$20,$00,$00 ; >
defb $38,$38,$04,$04,$04,$04,$08,$08,$10,$10,$00,$00,$10,$10,$00,$00 ; ?
defb $1c,$1c,$22,$22,$4e,$4e,$52,$52,$52,$52,$4e,$4e,$20,$20,$1e,$1e ; @
defb $10,$10,$10,$10,$28,$28,$28,$28,$7c,$7c,$44,$44,$44,$44,$00,$00 ; A
defb $78,$78,$44,$44,$44,$44,$78,$78,$44,$44,$44,$44,$78,$78,$00,$00 ; B
defb $38,$38,$44,$44,$40,$40,$40,$40,$40,$40,$44,$44,$38,$38,$00,$00 ; C
defb $78,$78,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$78,$78,$00,$00 ; D
defb $7c,$7c,$40,$40,$40,$40,$78,$78,$40,$40,$40,$40,$7c,$7c,$00,$00 ; E
defb $7c,$7c,$40,$40,$40,$40,$78,$78,$40,$40,$40,$40,$40,$40,$00,$00 ; F
defb $3c,$3c,$40,$40,$40,$40,$4c,$4c,$44,$44,$44,$44,$3c,$3c,$00,$00 ; G
defb $44,$44,$44,$44,$44,$44,$7c,$7c,$44,$44,$44,$44,$44,$44,$00,$00 ; H
defb $38,$38,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$00,$00 ; I
defb $04,$04,$04,$04,$04,$04,$04,$04,$44,$44,$44,$44,$38,$38,$00,$00 ; J
defb $44,$44,$48,$48,$50,$50,$60,$60,$50,$50,$48,$48,$44,$44,$00,$00 ; K
defb $40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$7c,$7c,$00,$00 ; L
defb $82,$82,$c6,$c6,$aa,$aa,$92,$92,$92,$92,$82,$82,$82,$82,$00,$00 ; M
defb $44,$44,$64,$64,$54,$54,$4c,$4c,$44,$44,$44,$44,$44,$44,$00,$00 ; N
defb $38,$38,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$38,$38,$00,$00 ; O
defb $78,$78,$44,$44,$44,$44,$78,$78,$40,$40,$40,$40,$40,$40,$00,$00 ; P
defb $38,$38,$44,$44,$44,$44,$44,$44,$54,$54,$48,$48,$34,$34,$04,$04 ; Q
defb $78,$78,$44,$44,$44,$44,$78,$78,$50,$50,$48,$48,$44,$44,$00,$00 ; R
defb $3c,$3c,$40,$40,$40,$40,$38,$38,$04,$04,$04,$04,$78,$78,$00,$00 ; S
defb $7c,$7c,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$00,$00 ; T
defb $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$38,$38,$00,$00 ; U
defb $44,$44,$44,$44,$44,$44,$28,$28,$28,$28,$10,$10,$10,$10,$00,$00 ; V
defb $92,$92,$92,$92,$aa,$aa,$aa,$aa,$44,$44,$44,$44,$44,$44,$00,$00 ; W
defb $44,$44,$44,$44,$28,$28,$10,$10,$28,$28,$44,$44,$44,$44,$00,$00 ; X
defb $44,$44,$44,$44,$28,$28,$28,$28,$10,$10,$10,$10,$10,$10,$00,$00 ; Y
defb $7c,$7c,$04,$04,$08,$08,$10,$10,$20,$20,$40,$40,$7c,$7c,$00,$00 ; Z
defb $3c,$3c,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$3c,$3c,$00,$00 ; [
defb $40,$40,$40,$40,$20,$20,$10,$10,$08,$08,$04,$04,$04,$04,$00,$00 ; \
defb $3c,$3c,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$3c,$3c,$00,$00 ; ]
defb $10,$10,$38,$38,$54,$54,$10,$10,$10,$10,$10,$10,$00,$00,$00,$00 ; ^
defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$ff ; _
defb $1c,$1c,$20,$20,$20,$20,$78,$78,$20,$20,$20,$20,$7c,$7c,$00,$00 ; £
defb $00,$00,$38,$38,$04,$04,$3c,$3c,$44,$44,$44,$44,$3c,$3c,$00,$00 ; a
defb $40,$40,$58,$58,$64,$64,$44,$44,$44,$44,$44,$44,$78,$78,$00,$00 ; b
defb $00,$00,$38,$38,$44,$44,$40,$40,$40,$40,$44,$44,$38,$38,$00,$00 ; c
defb $04,$04,$34,$34,$4c,$4c,$44,$44,$44,$44,$44,$44,$3c,$3c,$00,$00 ; d
defb $00,$00,$38,$38,$44,$44,$7c,$7c,$40,$40,$44,$44,$38,$38,$00,$00 ; e
defb $0c,$0c,$10,$10,$3c,$3c,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10 ; f
defb $00,$00,$3c,$3c,$44,$44,$44,$44,$44,$44,$3c,$3c,$04,$04,$38,$38 ; g
defb $40,$40,$58,$58,$64,$64,$44,$44,$44,$44,$44,$44,$44,$44,$00,$00 ; h
defb $00,$00,$30,$30,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$00,$00 ; i
defb $00,$00,$18,$18,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$30,$30 ; j
defb $20,$20,$24,$24,$28,$28,$30,$30,$28,$28,$24,$24,$22,$22,$00,$00 ; k
defb $30,$30,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$00,$00 ; l
defb $00,$00,$fc,$fc,$92,$92,$92,$92,$92,$92,$92,$92,$92,$92,$00,$00 ; m
defb $00,$00,$78,$78,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$00,$00 ; n
defb $00,$00,$38,$38,$44,$44,$44,$44,$44,$44,$44,$44,$38,$38,$00,$00 ; o
defb $00,$00,$78,$78,$44,$44,$44,$44,$44,$44,$64,$64,$58,$58,$40,$40 ; p
defb $00,$00,$3c,$3c,$44,$44,$44,$44,$44,$44,$4c,$4c,$34,$34,$04,$04 ; q
defb $00,$00,$2c,$2c,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$00,$00 ; r
defb $00,$00,$3c,$3c,$40,$40,$38,$38,$04,$04,$04,$04,$78,$78,$00,$00 ; s
defb $10,$10,$3c,$3c,$10,$10,$10,$10,$10,$10,$10,$10,$0c,$0c,$00,$00 ; t
defb $00,$00,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$3c,$3c,$00,$00 ; u
defb $00,$00,$44,$44,$44,$44,$28,$28,$28,$28,$10,$10,$10,$10,$00,$00 ; v
defb $00,$00,$91,$91,$91,$91,$4a,$4a,$5a,$5a,$24,$24,$24,$24,$00,$00 ; w
defb $00,$00,$44,$44,$28,$28,$10,$10,$10,$10,$28,$28,$44,$44,$00,$00 ; x
defb $00,$00,$44,$44,$44,$44,$28,$28,$28,$28,$10,$10,$10,$10,$60,$60 ; y
defb $00,$00,$3c,$3c,$04,$04,$08,$08,$10,$10,$20,$20,$3c,$3c,$00,$00 ; z
defb $1c,$1c,$10,$10,$10,$10,$60,$60,$10,$10,$10,$10,$1c,$1c,$00,$00 ; {
defb $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$00,$00 ; |
defb $70,$70,$10,$10,$10,$10,$0c,$0c,$10,$10,$10,$10,$70,$70,$00,$00 ; }
defb $34,$34,$58,$58,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; ~
defb $3c,$3c,$42,$42,$99,$99,$a5,$a5,$a1,$a1,$9d,$9d,$42,$42,$3c,$3c ; ©
textFontTileDataEnd:

LoadTextFontIntoVRAM::
	; Copy the tile data
	ld de, textFontTileData ; de contains the address where data will be copied from;
	ld hl, $9000 ; hl contains the address where data will be copied to;
	ld bc, textFontTileDataEnd - textFontTileData ; bc contains how many bytes we have to copy.
    call CopyDEintoMemoryAtHL
	ret

; ANCHOR: draw-text-tiles
DrawTextTilesLoop::

    ; Check for the end of string character 255
    ld a, [hl]
    cp 255
    ret z

    ; Write the current character (in hl) to the address
    ; on the tilemap (in de)
    ld a, [hl]
    ld [de], a

    inc hl
    inc de

    ; move to the next character and next background tile
    jp DrawTextTilesLoop
; ANCHOR_END: draw-text-tiles

; ANCHOR: typewriter-effect
DrawText_WithTypewriterEffect::

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Wait a small amount of time
    ; Save our count in this variable
    ld a, 3
    ld [wVBlankCount], a

    ; Call our function that performs the code
    call WaitForVBlankFunction
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    ; Check for the end of string character 255
    ld a, [hl]
    cp 255
    ret z

    ; Write the current character (in hl) to the address
    ; on the tilemap (in de)
    ld a, [hl]
    ld [de], a

    ; move to the next character and next background tile
    inc hl
    inc de

    jp DrawText_WithTypewriterEffect
; ANCHOR_END: typewriter-effect
"